#!/usr/bin/python
#
# OpenERP environment adminitrator
#

import sys, os, ConfigParser
import virtualenv
from virtualenv import subprocess
import argparse
from os.path import abspath, exists, join, basename, dirname
from os import remove
import signal

import bzrlib
from oerpenv import *

def init(args):
    """
    Init an environment in the work path or in the declared path. 
    """
    print "Init environment."
    
    path = args.path
    repository = args.repository
    config_filename = args.config
    version = args.version

    if path is not None:
        config_filename = join(abspath(path), config_filename)

    repository = abspath(repository) if repository is not None else None

    try:
        oerpenv = OpenERPEnvironment(config_filename=config_filename, sources=repository, init=True, version=version)
    except RuntimeError, s:
        print s
        return False

    try:
        for operation, local_branch_url, remote_branch_url in oerpenv.update(iterate=True):
            if operation == 'update':
                print "Updating %s from %s" % (local_branch_url, remote_branch_url)
            if operation == 'create':
                print "Creating %s from %s" % (local_branch_url, remote_branch_url)
    except bzrlib.errors.NotBranchError, m:
        import pdb; pdb.set_trace()
        print "Trouble creating/updating local repository."
        print "ERROR: %s" % m
        print "Please remove %s and execute the command again" % local_branch_url 
        return False
    except bzrlib.errors.InvalidURL:
        print "Trouble acceding remote repository."
        print "The url <%s> in the environment.conf is invalid. Modify it and try again." % remote_branch_url 
        return False

def update(args):
    """
    Update sources. 
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)

    try:
        for operation, local_branch_url, remote_branch_url in oerpenv.update(iterate=True, repositories=args.repositories):
            if operation == 'update':
                print "Updating %s from %s" % (local_branch_url, remote_branch_url)
            if operation == 'create':
                print "Creating %s from %s" % (local_branch_url, remote_branch_url)
    except bzrlib.errors.NotBranchError:
        print "Trouble creating/updating local repository."
        print "Please remove %s and execute the command again." % local_branch_url 
        return False
    except bzrlib.errors.InvalidURL:
        print "Trouble acceding remote repository."
        print "Please check the url <%s> in the environment.conf and try again." % remote_branch_url 
        return False

def create(args):
    """
    Create a new python environment.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)

    print "Creating environment %s" % args.name[0]

    oerpenv.create_python_environment(args.name[0])

def add(args):
    """
    Add a branch with to the sources list.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.load()

    oerpenv.add_repository(args.name[0], args.url[0])

    oerpenv.save()

def install(args):
    """
    Install all software in the default environment of in the declared.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    for app in oerpenv.installables:
        print "Installing %s" % app.name
        if app.install(oerpenv.binary_path):
            print "Successfull installed"
        else:
            print "ERROR: Can't confirm the application is installed."
            print "Please, execute 'operenv test base' to check if server is working"
            print "To check if client is working execute 'openerp client'"
            print "If not working, recreate the python environment and try again"
            print

def list_installables(args):
    """
    List all availables applications in sources.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    for application in oerpenv.installables:
        print "--"
        print "Application:", application.name
        print "Version:", application.fullname
        print "Description:", application.description

def list_addons(args):
    """
    List availables addons in sources. Show all addons if not filter expression declared.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    for addon in oerpenv.addons(args.filter_string):
        state = ''
        if exists(join(oerpenv.get_addonsourcepath(), addon.token)):
                state = 'e'
        else:
                state = 'd'
                
        print "%35ls :%s: %s" % (addon.token, state, addon.name)

def enable_addon(args):
    """
    Enabel addons on the environment. Create a symbolic link.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    addons_path = oerpenv.get_addonsourcepath()

    addons = dict([ (addon.token, addon) for addon in oerpenv.addons() ])
    addons_set = set(addons.keys())

    to_install = set( args.addon )

    if not exists(addons_path):
        print "Execute 'oerpenv install' before 'oerpenv enable'"
        return False

    if not to_install <= addons_set:
        print "No available addons '%s'." % ' '.join(to_install)
        return False

    while to_install and to_install <= addons_set:
        args.addon = to_install.pop()

        addon = addons[args.addon]

        to_install.update(addon.depends)

        where_install = join(addons_path, args.addon) 

        if exists(where_install):
            print "Updating %s" % args.addon
            os.remove(where_install)
        else:
            print "Installing %s" % args.addon

        os.symlink(addon.path, where_install)

        if 'base' in to_install: to_install.remove('base')

    return True

def disable_addon(args):
    """
    Disable addons on the environment. Remove a symbolic link.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    addons_path = oerpenv.get_addonsourcepath()

    addon_path = join(addons_path, args.addon[0])

    if exists(addon_path):
        print "Removing %s." % args.addon[0]
        remove(addon_path)
    else:
        print "Addon %s not enabled." % args.addon[0]

    return True

def create_dummy_addon(args):
    """
    Create a dummy addon. Useful to create new addon.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    source_path = join(oerpenv.sources_path, args.addon[0])
    if exists(source_path):
        print "Exists directory %s. Please remove it if you want a new dummy addon" % source_path
        return
    print "Creating dummy addon on %s" % source_path

    # Create addon path structure
    os.mkdir(source_path)
    for subdir in ['i18n', 'process', 'report', 'security', 'test', 'wizard']:
        os.mkdir(join(source_path, subdir))

    # Create __init__.py files
    for subdir in ['.', 'report', 'wizard']:
        with open(join(source_path, subdir, '__init__.py'), 'w') as file:
            file.write(defaults.openerp_header)
            file.write(defaults.init_body)
            file.write(defaults.openerp_footer)

    import pprint
    with open(join(source_path, oerpenv.desc_filename), 'w') as file:
        pp = pprint.PrettyPrinter(indent=4, stream=file)
        file.write(defaults.openerp_header)
        pp.pprint(defaults.addon_description(args.addon[0]))
        file.write(defaults.openerp_footer)

    oerpenv.save()

def test_addon(args):
    """
    Execute the server in test mode for this addon.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)
    addons_path = oerpenv.get_addonsourcepath()

    dbname = "test_db_%s" % '_'.join(args.addon)

    if not all([exists(join(addons_path, token)) for token in args.addon]):
        print "Not all addons are enable." 
        print "Execute 'oerpenv enable %s' before run this command." % ' '.join(args.addon) 
        return False

    print "Create db %s" % dbname
    try:
        tools.create_database(dbname);
    except RuntimeError, m:
        print m
        exit(-1)

    print "Running test %s" % ','.join(args.addon)
    try:
        initarg = sum([['--init', v] for v in args.addon ], [])
        options = []
        if oerpenv._config['Environment.version'] in '6.0':
            options += [ '--test-report-directory', oerpenv.reports_path ]
        oerpenv.execute('openerp-server', initarg + ['-d', dbname] + options)
    except KeyboardInterrupt:
        print "KeyboardInterrupt event."
    except OSError, m:
        print "Error in the environment."
        print "ERROR: %s" % m
        print "If you move the environment please rebuild default python environment and check directories in environment.conf file."
        print "If all ok, be sure you executed 'oerpenv install' before run this command."

    print "Drop db %s" % dbname
    tools.drop_database(dbname);

def start_client(args):
    """
    Execute the server in test mode for this addon.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    client_config_filename = join(oerpenv.env_path, 'etc', oerpenv.client_config_filename)

    print "Running client in environment %s" % args.environment
    try:
        oerpenv.execute('openerp-client', ['-c', client_config_filename])
    except KeyboardInterrupt:
        print "KeyboardInterrupt event."

def search_addon(args):
    """
    Search addon with this object.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    print "Definition:"
    for addon in oerpenv.addons(object_filter=args.objects[0]):
        print "%35s:%s" % (addon.token, addon.name)

    print "Inherited:"
    for addon in oerpenv.addons(inherited_filter=args.objects[0]):
        print "%35s:%s" % (addon.token, addon.name)
 
def show_addon(args):
    """
    Show addon information.
    """
    oerpenv = OpenERPEnvironment(config_filename=args.config)
    oerpenv.set_python_environment(args.environment)

    addons = dict([ (addon.token, addon) for addon in oerpenv.addons(token_filter=args.objects[0]) ])
    if args.objects[0] in addons:
        addon = addons[args.objects[0]]
        print "Token:", addon.token
        print "Name:", addon.name
        print "Version:", addon.version
        print "Author:", addon.author
        print "Description:", addon.description
        print "Web:", addon.website
        print "Depends:", ','.join(addon.depends)
        objects = addon.objects
        print "Defined Objects:", ','.join(objects[0]) 
        print "Inhereted Objects:", ','.join(objects[1])
        print "Source:", addon.path 

commands = [
    ('Environment operations', [
        ('init', init),
        ('create', create),
        ('install', install),
    ]),
    ('Repository operations', [
        ('add', add),
        ('update', update),
    ]),
    ('Observations', [
        ('list-addons', list_addons),
        ('list-installables', list_installables),
        ('search', search_addon),
        ('show', show_addon),
    ]),
    ('Addons operations', [
        ('dummy', create_dummy_addon),
        ('enable', enable_addon),
        ('disable', disable_addon),
    ]),
    ('Testing operations', [
        ('test', test_addon),
        ('client', start_client),
    ]),
]

commands_dict = dict(sum([ command_pairs for section, command_pairs in commands ], []))

def _help():
    s = "oerpenv [command] [options]\n"
    s += "The OpenERP environment administrator help you to administrate OpenERP environments. You can use the following commands.\n\n"
    for section, command_pairs in commands:
        s += " -- %s\n" % section
        for command, function in command_pairs:
            s += str(commands_dict[command].__doc__)
        s += "\n"
    s += "\nAll configurations are stored in the environment.conf file. You can setup it by hand or using the available commands."
    return s

def main():
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers(help='commands',
                                       description='The OpenERP environment administrator help you to administrate OpenERP environments. You can use the following commands.')

    # The init command
    parser_init = subparsers.add_parser('init', help=init.__doc__)

    parser_init.add_argument('path', metavar='path', type=str, nargs='?',
                             help='Path to the environment to init.')
    parser_init.add_argument('--repository', '-r', metavar='repository', type=str, nargs='?',
                             help='Local repository of sources.')
    parser_init.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_init.add_argument('--version', '-v', metavar='version', type=str, nargs='?',
                             help='OpenERP version to setup')
    parser_init.set_defaults(func=init,
                             config=defaults.config_filename,
                             version=defaults.version)

    # The update command
    parser_update = subparsers.add_parser('update', help=update.__doc__)
    parser_update.add_argument('repositories', metavar='repositories', type=str, nargs='*',
                             help='Repositories to update. None means all.')
    parser_update.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_update.set_defaults(func=update,
                             repositories=None,
                             config=defaults.config_filename)

    # The create command
    parser_create = subparsers.add_parser('create', help=create.__doc__)
    parser_create.add_argument('name', metavar='name', type=str, nargs=1,
                             help='Name for the python environment.')
    parser_create.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_create.set_defaults(func=create,
                             config=defaults.config_filename)

    # The add command
    parser_add = subparsers.add_parser('add', help=add.__doc__)
    parser_add.add_argument('name', metavar='name', type=str, nargs=1,
                             help='Name of the branch.')
    parser_add.add_argument('url', metavar='url', type=str, nargs=1,
                             help='URL to the repository.')
    parser_add.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_add.set_defaults(func=add,
                             config=defaults.config_filename)

    # The install command
    parser_install = subparsers.add_parser('install', help=install.__doc__)
    parser_install.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_install.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_install.set_defaults(func=install,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The list_installables command
    parser_list_installables = subparsers.add_parser('list-installables', help=list_installables.__doc__)
    parser_list_installables.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_list_installables.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_list_installables.set_defaults(func=list_installables,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The list_addons command
    parser_list_addons = subparsers.add_parser('list-addons', help=list_addons.__doc__)
    parser_list_addons.add_argument('filter_string', metavar='filter_string', type=str, nargs='?',
                             help='String filter.')
    parser_list_addons.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_list_addons.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_list_addons.set_defaults(func=list_addons,
                             filter_string='',
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The enable_addon command
    parser_enable_addon = subparsers.add_parser('enable', help=enable_addon.__doc__)
    parser_enable_addon.add_argument('addon', metavar='addon', type=str, nargs=1,
                             help='Addon name.')
    parser_enable_addon.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_enable_addon.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_enable_addon.set_defaults(func=enable_addon,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The disable_addon command
    parser_disable_addon = subparsers.add_parser('disable', help=disable_addon.__doc__)
    parser_disable_addon.add_argument('addon', metavar='addon', type=str, nargs=1,
                             help='Addon name.')
    parser_disable_addon.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_disable_addon.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_disable_addon.set_defaults(func=disable_addon,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The dummy command
    parser_create_dummy_addon = subparsers.add_parser('dummy', help=create_dummy_addon.__doc__)
    parser_create_dummy_addon.add_argument('addon', metavar='addon', type=str, nargs=1,
                             help='Addon name.')
    parser_create_dummy_addon.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_create_dummy_addon.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_create_dummy_addon.set_defaults(func=create_dummy_addon,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The test command
    parser_test_addon = subparsers.add_parser('test', help=test_addon.__doc__)
    parser_test_addon.add_argument('addon', metavar='addon', type=str, nargs='+',
                             help='Addon name.')
    parser_test_addon.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_test_addon.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_test_addon.set_defaults(func=test_addon,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The start_client command
    parser_start_client = subparsers.add_parser('client', help=start_client.__doc__)
    parser_start_client.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_start_client.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_start_client.set_defaults(func=start_client,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The search_addon command
    parser_search_addon = subparsers.add_parser('search', help=search_addon.__doc__)
    parser_search_addon.add_argument('objects', metavar='objects', type=str, nargs=1,
                             help='Object name.')
    parser_search_addon.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_search_addon.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_search_addon.set_defaults(func=search_addon,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # The show_addon command
    parser_show_addon = subparsers.add_parser('show', help=show_addon.__doc__)
    parser_show_addon.add_argument('objects', metavar='objects', type=str, nargs=1,
                             help='Object name.')
    parser_show_addon.add_argument('--environment', '-e', metavar='environment', type=str, nargs='?',
                             help='Python environment name.')
    parser_show_addon.add_argument('--config', '-c', metavar='config', type=str, nargs='?',
                             help='Environment configuration file.')
    parser_show_addon.set_defaults(func=show_addon,
                             environment=defaults.python_environment,
                             config=defaults.config_filename)

    # Parse and execute
    args = parser.parse_args()

    try:
        args.func(args)
    except NoEnvironmentConfigFileError, m:
        print "ERROR:", m.message
        print """
Go to a environment directory where environment.conf exists, or
create one using 'oerpenv init' command.
"""
    except NoVersionAvailableError, m:
        print "ERROR:", m.message
        print """
I can't manage this version. Please advise to developers using
this link http://launchpad.org/oerpenv/bugs. 


"""
    exit(0)


def signal_handler(signal, frame):
    sys.exit(-1)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)

    if not main():
        exit(-1)

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
