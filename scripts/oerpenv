#!/usr/bin/python
#
# OpenERP environment adminitrator
#

import sys, os, ConfigParser
import virtualenv
from virtualenv import subprocess
from optparse import OptionParser
from os.path import abspath, exists, join, basename, dirname
from os import remove
import signal

from oerpenv import defaults, tools
from oerpenv import OpenERPEnvironment, Addon

def init(path=None, sources=None, config_filename=defaults.config_filename, version=defaults.version):
    """
    oerpenv init [path]             Init an environment in the work path or in the declared path. 
    """
    print "Init environment."
    if path is not None:
        config_filename = join(abspath(path), config_filename)

    sources = abspath(sources) if sources is not None else None

    oerpenv = OpenERPEnvironment(config_filename=config_filename, sources=sources, init=True)

    for operation, local_branch_url, remote_branch_url in oerpenv.update(iterate=True):
        if operation == 'update':
            print "Updating %s from %s" % (local_branch_url, remote_branch_url)
        if operation == 'create':
            print "Creating %s from %s" % (local_branch_url, remote_branch_url)

def update(config_filename=defaults.config_filename, version=defaults.version,oerpenv=None):
    """
    oerpenv update                  Update sources. 
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)

    for operation, local_branch_url, remote_branch_url in oerpenv.update(iterate=True):
        if operation == 'update':
            print "Updating %s from %s" % (local_branch_url, remote_branch_url)
        if operation == 'create':
            print "Creating %s from %s" % (local_branch_url, remote_branch_url)

def create(name=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv create {name}           Create a new python environment.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)

    print "Creating environment %s" % name

    oerpenv.create_python_environment(name)

def add(branch_name, branch_path, config_filename=defaults.config_filename):
    """
    oerpenv add {name} {url}        Add a branch with to the sources list.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.load()

    oerpenv.add_repository(branch_name, branch_path)

    oerpenv.save()

def install(envname=defaults.python_environment,config_filename=defaults.config_filename):
    """
    oerpenv install [env]           Install all software in the default environment of in the declared.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.set_python_environment(envname)

    for item in oerpenv.install():
        print "Installing %s" % item
        oerpenv.install()

def list_installables(envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv list-installables       List all availables applications in sources.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.set_python_environment(envname)

    for application in oerpenv.installables:
        print "Application:", application.name
        print "Version:", application.fullname
        print "Description:", application.description

def list_addons(filter_string = None, envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv list-addons [expresion] List availables addons in sources. Show all addons if not filter expression declared.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.set_python_environment(envname)

    for addon in oerpenv.addons(filter_string):
        state = ''
        if exists(join(oerpenv.get_addonsourcepath(), addon.token)):
                state = 'e'
        else:
                state = 'd'
                
        print "%35ls :%s: %s" % (addon.token, state, addon.name)

def enable_addon(addon_token, envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv enable {addon}          Enabel addons on the environment. Create a symbolic link.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.load()
    oerpenv.set_python_environment(envname)

    addons_path = oerpenv.get_addonsourcepath()

    addons = dict([ (addon.token, addon) for addon in oerpenv.addons() ])
    addons_set = set(addons.keys())

    to_install = set([ addon_token ])

    if not exists(addons_path):
        print "Execute 'oerpenv install' before 'oerpenv enable'"
        return False

    if not to_install <= addons_set:
        print "No available addon %s." % addon_name
        return False

    while to_install and to_install <= addons_set:
        addon_token = to_install.pop()

        addon = addons[addon_token]

        to_install.update(addon.depends)

        where_install = join(addons_path, addon_token) 

        if exists(where_install):
            print "Updating %s" % addon_token
            os.remove(where_install)
        else:
            print "Installing %s" % addon_token

        os.symlink(addon.path, where_install)

        if 'base' in to_install: to_install.remove('base')

    return True

def disable_addon(addon_token, envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv disable {addon}         Disable addons on the environment. Remove a symbolic link.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.load()
    oerpenv.set_python_environment(envname)

    addons_path = oerpenv.get_addonsourcepath()

    addon_path = join(addons_path, addon_token)

    if exists(addon_path):
        print "Removing %s." % addon_token
        remove(addon_path)
    else:
        print "Addon %s not enabled." % addon_token

    return True

def create_dummy_addon(addon_token, envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv dummy {addon}           Create a dummy addon. Useful to create new addon.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.load()
    oerpenv.set_python_environment(envname)

    source_path = join(oerpenv.sources_path, addon_token)
    if exists(source_path):
        print "Exists directory %s. Please remove it if you want a new dummy addon" % source_path
        return
    print "Creating dummy addon on %s" % source_path

    # Create addon path structure
    os.mkdir(source_path)
    for subdir in ['i18n', 'process', 'report', 'security', 'test', 'wizard']:
        os.mkdir(join(source_path, subdir))

    # Create __init__.py files
    for subdir in ['.', 'report', 'wizard']:
        with open(join(source_path, subdir, '__init__.py'), 'w') as file:
            file.write(defaults.openerp_header)
            file.write(defaults.init_body)
            file.write(defaults.openerp_footer)

    import pprint
    with open(join(source_path, oerpenv.desc_filename), 'w') as file:
        pp = pprint.PrettyPrinter(indent=4, stream=file)
        file.write(defaults.openerp_header)
        pp.pprint(defaults.addon_description(addon_token))
        file.write(defaults.openerp_footer)

    oerpenv.save()

def test_addon(addon_token, envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv test {addon}            Execute the server in test mode for this addon.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.load()
    oerpenv.set_python_environment(envname)
    addons_path = oerpenv.get_addonsourcepath()

    dbname = "test_db_%s" % ''.join(addon_token)

    print "Create db %s" % dbname
    tools.create_database(dbname);

    print "Running test %s" % addon_token
    try:
        oerpenv.execute('openerp-server', ['--init', addon_token, '-d', dbname, '--test-report-directory', oerpenv.reports_path ])
    except KeyboardInterrupt:
        print "KeyboardInterrupt event."

    print "Drop db %s" % dbname
    tools.drop_database(dbname);

def start_client(envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv client                  Execute the server in test mode for this addon.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.load()
    oerpenv.set_python_environment(envname)

    client_config_filename = join(oerpenv.env_path, 'etc', oerpenv.client_config_filename)

    print "Running client in environment %s" % envname
    try:
        oerpenv.execute('openerp-client', ['-c', client_config_filename])
    except KeyboardInterrupt:
        print "KeyboardInterrupt event."

def search_addon(objectname, envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv search {object}         Search addon with this object.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.load()
    oerpenv.set_python_environment(envname)

    print "Definition:"
    for addon in oerpenv.addons(object_filter=objectname):
        print "%35s:%s" % (addon.token, addon.name)

    print "Inherited:"
    for addon in oerpenv.addons(inherited_filter=objectname):
        print "%35s:%s" % (addon.token, addon.name)
 
def show_addon(addonname, envname=defaults.python_environment, config_filename=defaults.config_filename):
    """
    oerpenv show {addon}            Show addon information.
    """
    oerpenv = OpenERPEnvironment(config_filename=config_filename)
    oerpenv.load()
    oerpenv.set_python_environment(envname)

    addons = dict([ (addon.token, addon) for addon in oerpenv.addons(token_filter=addonname) ])
    if addonname in addons:
        addon = addons[addonname]
        print "Token:", addon.token
        print "Name:", addon.name
        print "Version:", addon.version
        print "Author:", addon.author
        print "Description:", addon.description
        print "Web:", addon.website
        print "Depends:", ','.join(addon.depends)
        objects = addon.objects
        print "Defined Objects:", ','.join(objects[0]) 
        print "Inhereted Objects:", ','.join(objects[1])
        print "Source:", addon.path 

commands = [
    ('Environment operations', [
        ('init', init),
        ('create', create),
        ('install', install),
    ]),
    ('Repository operations', [
        ('add', add),
        ('update', update),
    ]),
    ('Observations', [
        ('list-addons', list_addons),
        ('list-installables', list_installables),
        ('search', search_addon),
        ('show', show_addon),
    ]),
    ('Addons operations', [
        ('dummy', create_dummy_addon),
        ('enable', enable_addon),
        ('disable', disable_addon),
    ]),
    ('Testing operations', [
        ('test', test_addon),
        ('client', start_client),
    ]),
]

commands_dict = dict(sum([ command_pairs for section, command_pairs in commands ], []))

def _help():
    s = "oerpenv [command] [options]\n"
    s += "The OpenERP environment administrator help you to administrate OpenERP environments. You can use the following commands.\n\n"
    for section, command_pairs in commands:
        s += " -- %s\n" % section
        for command, function in command_pairs:
            s += str(commands_dict[command].__doc__)
        s += "\n"
    s += "\nAll configurations are stored in the environment.conf file. You can setup it by hand or using the available commands."
    return s

def main():
    parser = OptionParser()
    parser.set_usage(_help())

    (options, args) = parser.parse_args()

    try:
        command = args.pop(0)
    except:
        print _help()
        return False

    if command in commands_dict:
        sys.exit(commands_dict[command](*args))
    else:
        print _help()
        return False

def signal_handler(signal, frame):
    sys.exit(-1)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)

    if not main():
        exit(-1)

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
